@model IT_Airlines.Models.ViewModels.FlightViewModel

@{
    ViewBag.Title = "Edit";
}

@Styles.Render("~/Content/css_Flights/Flights_edit.css")

<div class="col-sm-5 mr-auto ml-auto" id="content">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Edit flight</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="form-group">
                @Html.LabelFor(model => model.AirportFrom, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-12">
                    @Html.DropDownListFor(model => model.AirportFrom, ViewBag.Airports as SelectList, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.AirportFrom, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.AirportTo, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-12">
                    @Html.DropDownListFor(model => model.AirportTo, ViewBag.Airports as SelectList, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.AirportTo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Airplane, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-12">
                    @Html.DropDownListFor(model => model.Airplane, ViewBag.Airplanes as SelectList, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Airplane, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Departure, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.Departure, new { htmlAttributes = new { @class = "form-control", id="departure-datepicker" } })
                    @Html.ValidationMessageFor(model => model.Departure, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Landing, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.Landing, new { htmlAttributes = new { @class = "form-control", id="return-datepicker" } })
                    @Html.ValidationMessageFor(model => model.Landing, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.BasePrice, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.BasePrice, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BasePrice, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                <div class="col-md-offset-2 col-md-12">
                    <div class="btn-group mr-2 btn-block" role="group" aria-label="First group">
                        @Html.ActionLink("Back", "Index", null, new { @class = "btn btn-outline-danger" })
                        <input type="submit" value="Save" class="btn btn-outline-danger" />
                    </div>
                </div>
            </div>
        </div>

    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {
            
            const formatDate = 'mm/dd/yy';
            const formatTime = 'HH:mm';
            //const altFormatDate = 'mm-dd-yy';


            $("#departure-datepicker").datetimepicker({
                minDate: new Date().getDate + 1,
                minTime: new Date().getHours + 1,
                dateFormat: formatDate,
                timeFormat: formatTime,
                onSelect: function () {
                    departureDate = $(this).datetimepicker('getDate');
                    dateNow = new Date()
                    if (departureDate < dateNow) {
                        departureDate.setMinute(departureDate.getMinute()+5)
                    }
                    $("#return-datepicker").datetimepicker('setDate', departureDate)
                    $("#return-datepicker").datetimepicker('option', 'minDate', departureDate)
                    
                },
                controlType: 'select',
            }).attr('readonly', 'readonly');


            $("#return-datepicker").datetimepicker({
                minDate: $("#departure-datepicker").datetimepicker('getDate'),
                dateFormat: formatDate,
                timeFormat: formatTime,
                onSelect: function () {
                    returnDate = $(this).datetimepicker('getDate');
                    departureDate = $("#departure-datepicker").datetimepicker('getDate');

                    if (returnDate < departureDate) {
                        $(this).datetimepicker('setDate', departureDate)
                    }
                },
                controlType: 'select',
            }).attr('readonly', 'readonly');
        })
    </script>
}

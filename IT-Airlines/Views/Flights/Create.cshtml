@model IT_Airlines.Models.ViewModels.FlightViewModel

@{
    ViewBag.Title = "Create";
}

@Styles.Render("~/Content/css_Flights/Flights_create.css")

<div class="row">
    <div class="col-sm-5 ml-auto mr-auto" id="content">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <h4>Create new flight</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group">
                    @Html.LabelFor(model => model.AirportFrom, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-12">
                        @Html.DropDownListFor(model => model.AirportFrom, ViewBag.Airports as SelectList, new { @class = "form-control", id="ddlAirportFrom" })
                        @Html.ValidationMessageFor(model => model.AirportFrom, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.AirportTo, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-12">
                        @Html.DropDownListFor(model => model.AirportTo, ViewBag.Airports as SelectList, new { @class = "form-control", id="ddlAirportTo" })
                        @Html.ValidationMessageFor(model => model.AirportTo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Airplane, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-12">
                        @Html.DropDownListFor(model => model.Airplane, ViewBag.Airplanes as SelectList, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Airplane, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Departure, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.Departure, new { htmlAttributes = new { @class = "form-control", id="departure-datepicker" } })

                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Landing, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.Landing, new { htmlAttributes = new { @class = "form-control", id="return-datepicker" } })
                       
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.BasePrice, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.BasePrice, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.BasePrice, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-12">
                        <div class="btn-group mr-2 btn-block" role="group" aria-label="First group">
                            @Html.ActionLink("Back", "Index", null, new { @class = "btn btn-outline-danger" })
                            <button type="submit" class="btn btn-outline-danger">Create</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {

            const formatDate = 'dd/mm/yy';
            const formatTime = 'HH:mm';
            //const altFormatDate = 'mm-dd-yy';


            $("#departure-datepicker").datetimepicker({
                minDate: new Date(),
                minTime: new Date(),
                dateFormat: formatDate,
                timeFormat: formatTime,
                //altFormat: altFormatDate,
                onSelect: function () {
                    departureDate = $(this).datetimepicker('getDate');
                    dateNow = new Date()
                    if (departureDate < dateNow) {
                        departureDate.setMinute(departureDate.getMinute()+5)
                    }
                    $("#return-datepicker").datetimepicker('setDate', departureDate)
                    $("#return-datepicker").datetimepicker('option', 'minDate', departureDate)
                    $("#return-datepicker").datetimepicker('option', 'minTime', departureDate)
                    
                },
                controlType: 'select',
            }).attr('readonly', 'readonly');


            $("#return-datepicker").datetimepicker({
                minDate: new Date(),
                minTime: new Date(),
                dateFormat: formatDate,
                timeFormat: formatTime,
                onSelect: function () {
                    returnDate = $(this).datetimepicker('getDate');
                    departureDate = $("#departure-datepicker").datetimepicker('getDate');

                    if (returnDate < departureDate) {
                        $(this).datetimepicker('setDate', departureDate)
                    }
                },
                controlType: 'select',
            }).attr('readonly', 'readonly');

            //Gi menam na pocetokot da ne se isti
            children = $("#ddlAirportTo").children("option").last().val();
            $("#ddlAirportTo").val(children);
            
        //Pri promena na aerodrom da se skrie od AirportTo
            $('#ddlAirportFrom').change(function () {
                var SelectedItem = $(this).children("option:selected").val();

                HideAirportsFrom(SelectedItem);

            });

            //Pri promena na aerodrom da se skrie od AirportFrom
            $('#ddlAirportTo').change(function () {
                var SelectedItem = $(this).children("option:selected").val();

                HideAirportsTo(SelectedItem);
            });
            
       

        //Se krie Aerodromot za da nemoze da nastane dva isti aerodroma da  se odberat
        function HideAirportsFrom(item) {
            //Go Krijam Select Airport za da nema greski pri biranjeto
            $('#ddlAirportFrom option').each(function () {
                if ($(this).val() == "") {
                    $(this).hide();
                }
            });
            $('#ddlAirportTo option').each(function () {
                if ($(this).val() == item || $(this).val() == "") {
                    $(this).hide();
                }
                else {
                    $(this).show();
                }
            });
        }

        function HideAirportsTo(item) {
            //Go Krijam Select Airport za da nema greski pri biranjeto
            $('#ddlAirportTo option').each(function () {
                if ($(this).val() == "") {
                    $(this).hide();
                }
            });
            $('#ddlAirportFrom option').each(function () {
                if ($(this).val() == item || $(this).val() == "") {
                    $(this).hide();
                }
                else {
                    $(this).show();
                }
            });
        }

        });
    </script>
}

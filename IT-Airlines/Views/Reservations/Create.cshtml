@model IT_Airlines.Models.ViewModels.CreateReservationsViewModel
@using IT_Airlines.Models.Entities

@{
    ViewBag.Title = "Create";
}

@Styles.Render("~/Content/css_Reservations/Reservations_create.css")

<div class="row">
    <div class="col-sm-5 ml-auto mr-auto" id="content">

        <label>Total price: <span id="total"></span>$</label>
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Your Reservation</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.RoundTrip)
        <div id="first-page">
            <div id="tabs">
                <ul>
                    <li><a href="#tab-firstFlight">First Flight</a></li>
                    @if (Model.RoundTrip)
                    {
                        <li><a href="#tab-secondFlight">Second Flight</a></li>
                    }
                </ul>
                <div class="form-group" id="tab-firstFlight">
                    @Html.LabelFor(model => model.Flight,"Select Flight", htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12 radio-toolbar">
                        @foreach (var item in ViewBag.f)
                        {
                            <input type="radio" name="Flight" value="@item.Id" id="@item.Id" class="radio_item" />
                            <label style="border-bottom: 1px solid black" class="label_item p-2" for="@item.Id">
                                <div>@item.AirportFrom - @item.AirportTo</div>
                                <p>Departure: @item.Departure</p>
                                <p>Price: @item.BasePrice $</p>
                            </label>
                        }

                    </div>
                </div>
                @if (Model.RoundTrip == true)
                {
                <div class="form-group" id="tab-secondFlight">
                    @Html.LabelFor(model => model.ReturnFlight,"Select Return Flight", htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @foreach (var item in ViewBag.rf)
                        {
                            <input type="radio" name="ReturnFlight" value="@item.Id" id="@item.Id" class="radio_item_2" />
                            <label style="border-bottom: 1px solid black" class="label_item_2 p-2" for="@item.Id">
                                <div>@item.AirportFrom - @item.AirportTo</div>
                                <p>Departure: @item.Departure</p>
                                <p>Price: @item.BasePrice $</p>
                            </label>
                        }
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-12">
                            <button type="button" id="next-page" class="btn btn-danger btn-block" onclick="SecondPage()">Continue</button>
                        </div>
                    </div>
                </div>
                    
                }
                else
                {
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-12">
                            <button type="button" id="next-page" class="btn btn-danger btn-block" onclick="SecondPage()">Continue</button>
                        </div>
                    </div>
                }
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-12">
                        <p class="err err-no-flights">Ooops... No flights found for your request.</p>
                        @Html.ActionLink("Create a new reservation", "Index", "Home", new { }, new { @class = "btn btn-danger btn-block", @id = "new-res" })
                    </div>
                </div>
            </div>
        </div>


        <div id="second-page">
            @for (int i = 0; i < Model.Reservations.Count; ++i)
            {
                string divId = "res-" + i.ToString();

                <div id="@divId" style="display:none">
                    <h2>Enter information for passenger number @(i + 1) </h2>

                    <div class="form-group .focus-@i">
                        @Html.LabelFor(model => model.Luggages[i], "Luggage", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-12">
                            @Html.DropDownListFor(model => model.Luggages[i], ViewBag.Luggages as SelectList, new { @class = "form-control", @id = "l-" + i.ToString() })
                            @Html.ValidationMessageFor(model => model.Luggages[i], "", new { @class = "text-danger" })

                        </div>
                    </div>
                    @if (Model.RoundTrip)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.ReturnLuggages[i], "Return Luggage", htmlAttributes: new { @class = "control-label col-md-4" })

                            <div class="col-md-12">
                                @Html.DropDownListFor(model => model.ReturnLuggages[i], ViewBag.Luggages as SelectList, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ReturnLuggages[i], "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }

                    <div class="form-group">
                        @Html.LabelFor(model => model.Reservations[i].Passenger.FirstName, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.Reservations[i].Passenger.FirstName, new { htmlAttributes = new { @class = "form-control val-" + @i + "-firstname" } })
                            @Html.ValidationMessageFor(model => model.Reservations[i].Passenger.FirstName, "", new { @class = "text-danger " })
                            <span class="err err-@i-firstname">First name field is required</span>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Reservations[i].Passenger.LastName, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.Reservations[i].Passenger.LastName, new { htmlAttributes = new { @class = "form-control val-" + @i + "-lastname" } })
                            @Html.ValidationMessageFor(model => model.Reservations[i].Passenger.LastName, "", new { @class = "text-danger" })
                            <span class="err err-@i-lastname">Last name field is required</span>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Reservations[i].Passenger.Gender, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-12">
                            @Html.EnumDropDownListFor(model => model.Reservations[i].Passenger.Gender, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Reservations[i].Passenger.Gender, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Reservations[i].Passenger.BirthDate, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.Reservations[i].Passenger.BirthDate, new { htmlAttributes = new { @class = "form-control val-" + @i + "-birthdate birthday", type="text" } })
                            @Html.ValidationMessageFor(model => model.Reservations[i].Passenger.BirthDate, "", new { @class = "text-danger" })
                            <span class="err err-@i-birthdate">Birth date field is required</span>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Reservations[i].Passenger.PassportCode, htmlAttributes: new { @class = "control-label col-md" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.Reservations[i].Passenger.PassportCode, new { htmlAttributes = new { @class = "form-control val-" + @i + "-passportcode" } })
                            @Html.ValidationMessageFor(model => model.Reservations[i].Passenger.PassportCode, "", new { @class = "text-danger" })
                            <span class="err err-@i-passportcode">Passport code field is required</span>
                        </div>
                    </div>
                    <div class="row">
                        @if (i == Model.Reservations.Count - 1)
                        {
                            <div class="col-sm">
                                <div class="col-md-offset-2 col-md-12">
                                    <a href="#"><button type="button" id="prev-page" class="btn btn-danger btn-block" onclick="goNext(@i)">Next</button></a>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="col-sm">
                                <div class="col-md-offset-2 col-md-12">
                                    <a href="#"><button type="button" id="prev-page" class="btn btn-danger btn-block" onclick="goNext(@i)">Next</button></a>
                                </div>
                            </div>
                        }
                    </div>
                    <br>
                    <div class=" row">
                        @if (i == 0)
                        {
                            <div class="col-sm">
                                <div class="col-md-offset-2 col-md-12">
                                    <button type="button" id="prev-page" class="btn btn-light btn-block" onclick="FirstPage()">Back</button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="col-sm">
                                <div class="col-md-offset-2 col-md-12">
                                    <a href="#"><button type="button" id="prev-page" class="btn btn-light btn-block" onclick="goBack(@i)">Back</button></a>
                                </div>
                            </div>
                        }

                    </div>
                </div>


            }

            <div id="res-@Model.Reservations.Count" style="display:none">
                <div class="col-sm">
                    <div class="col-md-offset-2 col-md-12">
                        <p><span id="total2"></span>$ will be taken from your bank account. Do you want to create the reservation?</p>
                    </div>
                </div>
                <div class="col-sm">
                    <div class="col-md-offset-2 col-md-12">
                        <input id="btnSubmit" type="submit" value="Create" class="btn btn-danger btn-block" onclick="create()" />
                        @Html.ActionLink("Cancel Reservation", "Index", "Home", new { }, new { @class = "btn btn-danger btn-block", @id = "new-res" })
                        <a href="#"><button type="button" id="prev-page" class="btn btn-light btn-block mt-2" onclick="goBack(@Model.Reservations.Count)">Back</button></a>
                    </div>
                </div>

            </div>


        </div>


    </div>
        }
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">

        //validation
        function validate(id) {
            var validated = true;
            if (!validateFirstName(id)) {
                validated = false;
            }
            if (!validateLastName(id)) {
                validated = false;
            }
            if (!validateBirthDate(id)) {
                validated = false;
            }
            if (!validatePassportCode(id)) {
                validated = false;
            }
            return validated;
        }

        function validateFirstName(id) {
            var element = $(".val-" + id + "-firstname").val();
            if (element.trim() === "") {
                $(".err-" + id + "-firstname").show();
                return false;
            }
            $(".err-" + id + "-firstname").hide();
            return true;
        }

        function validateLastName(id) {
            var element = $(".val-" + id + "-lastname").val();
            if (element.trim() === "") {
                $(".err-" + id + "-lastname").show();
                return false;
            }
            $(".err-" + id + "-lastname").hide();
            return true;
        }

        function validateBirthDate(id) {
            var element = $(".val-" + id + "-birthdate").val();
            if (element.trim() === "") {
                 $(".err-" + id + "-birthdate").show();
                return false;
            }
            $(".err-" + id + "-birthdate").hide();
            return true;
        }

        function validatePassportCode(id) {
            var element = $(".val-" + id + "-passportcode").val();
            if (element.trim() === "") {
                 $(".err-" + id + "-passportcode").show();
                return false;
            }
            $(".err-" + id + "-passportcode").hide();
            return true;
        }



        //

        var sum = 0;
        var fp_sum = 0;

        $(document).ready(function () {
            init();

            $('#tabs').tabs();

            const format = "mm/dd/yy";

            $(".birthday").datepicker({
                maxDate: new Date(),
                minDate: new Date(1930, 01, 01),
                beforeShow: function () {
                    $(this).datepicker('option','defaultDate', new Date(1990, 01, 01));
                },
                changeMonth: true,
                changeYear: true,
                dateFormat: format,
            }).attr('readonly', 'readonly');


        });

        function init() {
            $("#second-page").hide();
            $(".err").hide();
            $("#new-res").hide();
            document.getElementById('total').innerHTML = 0;

            if (@((ViewBag.Flights as SelectList).Count()) == 0) {
                $("#next-page").attr("disabled", true);
                $(".err-no-flights").show();
                $("#new-res").show();
            } else if (@Model.RoundTrip.ToString().ToLower()) {
                if (@((ViewBag.ReturnFlights as SelectList).Count()) == 0) {
                    $("#next-page").attr("disabled", true);
                    $(".err-no-flights").show();
                    $("#new-res").show();
                }
         }
        }

        function goNext(id) {
            if (validate(id)) {
                $("#res-" + id).hide();
                ajaxLuggagePrice(parseInt($('#l-' + id).children("option:selected").val())).done(function (value) {
                    sum += parseFloat(value);
                });
                if (@Model.RoundTrip.ToString().ToLower()) {
                    ajaxLuggagePrice(parseInt($('#rl-' + id).children("option:selected").val())).done(function (value) {
                        sum += parseFloat(value);
                    });
                }
                id += 1;
                $("#res-" + id).show();
                document.getElementById('total').innerHTML = sum;
                document.getElementById('total2').innerHTML = sum;
                $(".focus-" + (id + 1)).focus();
            }
            $(".focus-" + (id)).focus();

        }

        function goBack(id) {
            $("#res-" + id).hide();
            id -= 1;
            ajaxLuggagePrice(parseInt($('#l-' + id).children("option:selected").val())).done(function (value) {
                sum -= parseFloat(value);
            });
            if (@Model.RoundTrip.ToString().ToLower()) {
                ajaxLuggagePrice(parseInt($('#rl-' + id).children("option:selected").val())).done(function (value) {
                    sum -= parseFloat(value);
                });
            }
            $("#res-" + id).show();
            document.getElementById('total').innerHTML = sum;
        }

        function FirstPage() {
            $("#second-page").hide();
            $("#first-page").show();
            sum = 0;
            document.getElementById('total').innerHTML = sum;
        }

        function SecondPage() {
            $("#first-page").hide();
            $("#second-page").show();
            $("#res-0").show();

            console.log($('.radio_item:checked').attr('value'));
            ajaxFlightPrice(parseInt($('.radio_item:checked').attr('value'))).done(function (value) {
                fp_sum = parseFloat(value);
            });
            if (@Model.RoundTrip.ToString().ToLower()) {
                ajaxFlightPrice(parseInt($('.radio_item_2:checked').attr('value'))).done(function (value) {
                fp_sum += parseFloat(value);
            });
            }
            sum = fp_sum * (@Model.Reservations.Count);
            document.getElementById('total').innerHTML = sum;
        }

        function ajaxFlightPrice(id) {
             var url = "../Flights/getPrice/" + id;
             return $.ajax({
                            url: url,
                            method: "GET",
                            dataType: "json",
                            async: false,
                            contentType: "application/json; charset=utf-8",

                            success: function (result) {
                                data = result;
                                return data;
                            },
                            error: function (error) {
                                console.error(error);
                            }
             });
        }

        function ajaxLuggagePrice(id) {
            var url = "../Luggages/getPrice/" + id;
             return $.ajax({
                            url: url,
                            method: "GET",
                            dataType: "json",
                            async: false,
                            contentType: "application/json; charset=utf-8",

                            success: function (result) {
                                data = result;
                                return data;
                            },
                            error: function (error) {
                                console.error(error);
                            }
             });
        }

        function create() {
            //if valid
            //sum += parseInt($('#l-' + (@Model.Reservations.Count-1)).children("option:selected").val());  wtf? xD
            document.getElementById('total').innerHTML = sum;
        }

    </script>
}
